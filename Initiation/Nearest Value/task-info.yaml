type: checkiO
files:
- name: mission.py
  visible: true
  text: |
    def nearest_value(values: set, one: int) -> int:
        # your code here
        return None


    if __name__ == "__main__":
        print("Example:")
        print(nearest_value({4, 7, 10, 11, 12, 17}, 9))

        # These "asserts" are used for self-checking and not for an auto-testing
        assert nearest_value({4, 7, 10, 11, 12, 17}, 9) == 10
        assert nearest_value({4, 7, 10, 11, 12, 17}, 8) == 7
        assert nearest_value({4, 8, 10, 11, 12, 17}, 9) == 8
        assert nearest_value({4, 9, 10, 11, 12, 17}, 9) == 9
        assert nearest_value({4, 7, 10, 11, 12, 17}, 0) == 4
        assert nearest_value({4, 7, 10, 11, 12, 17}, 100) == 17
        assert nearest_value({5, 10, 8, 12, 89, 100}, 7) == 8
        assert nearest_value({5}, 5) == 5
        assert nearest_value({5}, 7) == 5
        print("Coding complete? Click 'Check' to earn cool rewards!")
  learner_created: false
status: Unchecked
code: |
  def nearest_value(values: set, one: int) -> int:
      # your code here
      return None


  if __name__ == "__main__":
      print("Example:")
      print(nearest_value({4, 7, 10, 11, 12, 17}, 9))

      # These "asserts" are used for self-checking and not for an auto-testing
      assert nearest_value({4, 7, 10, 11, 12, 17}, 9) == 10
      assert nearest_value({4, 7, 10, 11, 12, 17}, 8) == 7
      assert nearest_value({4, 8, 10, 11, 12, 17}, 9) == 8
      assert nearest_value({4, 9, 10, 11, 12, 17}, 9) == 9
      assert nearest_value({4, 7, 10, 11, 12, 17}, 0) == 4
      assert nearest_value({4, 7, 10, 11, 12, 17}, 100) == 17
      assert nearest_value({5, 10, 8, 12, 89, 100}, 7) == 8
      assert nearest_value({5}, 5) == 5
      assert nearest_value({5}, 7) == 5
      print("Coding complete? Click 'Check' to earn cool rewards!")
seconds_from_change: 9223372036854775807
